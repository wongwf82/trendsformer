<div id="googlemap"></div>

<% content_for :foot do %>

  <script src="http://maps.googleapis.com/maps/api/js?sensor=true&libraries=places" type="text/javascript"></script>

  <script type="text/javascript">   

  <!--
    var defaultZoom = 16; // Why zoomed in? Because it looks good.
    
    // create map and add controls
    var mapOptions = {
      center: new google.maps.LatLng(13.731547730050778, 100.56798934936523),
      zoom: defaultZoom,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      scrollwheel: false,
      scaleControl: false
    };
    var map = new google.maps.Map(document.getElementById('googlemap'),mapOptions);

  	// I'm Centering the map in Bangkok
  	// '13.731547730050778'
  	// '100.56798934936523'
  	var mylat = document.getElementById("location_lat").value;
  	var mylng = document.getElementById("location_lng").value;
  	if (jQuery.isEmptyObject(mylat)) {
  	  var mylat = '13.731548';
  	  var mylng = '100.56799';
  	  var defaultZoom = 14;
  	};

  	// set center point of map to be of the Marker or the Default City
    var centrePoint = new google.maps.LatLng(mylat, mylng);
    map.setCenter(centrePoint);
    map.setZoom(defaultZoom); 

  	// add a draggable marker
    marker = new google.maps.Marker({
      map: map,
      draggable: true,
      animation: google.maps.Animation.DROP,
      position: centrePoint
    });

    var defaultImage = new google.maps.MarkerImage(
        "http://maps.gstatic.com/mapfiles/place_api/icons/geocode-71.png",
        new google.maps.Size(71, 71),
        new google.maps.Point(0, 0),
        new google.maps.Point(17, 34),
        new google.maps.Size(35, 35));
    marker.setIcon(defaultImage);

    google.maps.event.addListener(marker, 'click', toggleBounce);

  	// create Info window for marker
    var infowindow = new google.maps.InfoWindow();
    
    // Address Autocomplete
    var input = document.getElementById('location_search');
    var autocomplete = new google.maps.places.Autocomplete(input);
    autocomplete.bindTo('bounds', map);
    
  	// add a drag listener to the map
  	google.maps.event.addListener(marker, "dragend", function() {
  		var point = marker.getPosition();
  		map.panTo(point);
  		document.getElementById("location_lat").value = point.lat();
  		document.getElementById("location_lng").value = point.lng();
  		infowindow.close();
      marker.setIcon(defaultImage);
    });
    var place;
    var photos;
    var ll;

    // Autocomplete Listener
    google.maps.event.addListener(autocomplete, 'place_changed', function() {

      $('#no-reviews').hide();
      $('#address').hide();
      $("#googlemap").css({"position":"absolute","top":"-20000px"});
      $("#chartGoogle").css({"position":"absolute","top":"-20000px"});
      $("#chartYelp").css({"position":"absolute","top":"-20000px"});

      place = autocomplete.getPlace();
      marker.setPosition(place.geometry.location);
      map.panTo(place.geometry.location);
      map.setZoom(16);
  		document.getElementById("location_lat").value = place.geometry.location.lat();
  		document.getElementById("location_lng").value = place.geometry.location.lng();
      ll = place.geometry.location.lat() + ',' + place.geometry.location.lng();

  		// Sets the proper image on the marker. ie. school/hospital marker
  		var image = new google.maps.MarkerImage(
          place.icon,
          new google.maps.Size(71, 71),
          new google.maps.Point(0, 0),
          new google.maps.Point(17, 34),
          new google.maps.Size(35, 35));
      marker.setIcon(image);
      marker.setPosition(place.geometry.location);

      var address = '';
      if (place.address_components) {
        address = [(place.address_components[0] &&
                    place.address_components[0].short_name || ''),
                   (place.address_components[1] &&
                    place.address_components[1].short_name || ''),
                   (place.address_components[2] &&
                    place.address_components[2].short_name || '')
                  ].join(' ');
      }

      infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
      infowindow.open(map, marker);

      // Autofill the fields in the form. TODO: improve parsing of the returned JSON data
      var website = place.url;

      if (place.name) {
        var location_name = place.name;
      }
      var formatted_address = place.formatted_address;
      var international_phone_number = place.international_phone_number;
      var formatted_phone_number = place.formatted_phone_number;

      // Render Google Places chart
      var title = '';
      if (place.reviews) {
        var lineGoogle = [];
        var i = 0;
        while (i < 10) {
          if (place.reviews[i]) {
            lineGoogle.push([epoch_toYMD(place.reviews[i].time), place.reviews[i].rating]);
          }
          i++;
        }
        title = 'Google Places - Recent Overall Rating: ' + getAvgRating(lineGoogle) + '/5';
        plotGraph('chartGoogle', lineGoogle, title);   
        $("#chartGoogle").css({"position":"relative","top":"0px"});
        $("#googlemap").css({"position":"relative","top":"0px"});
        $('#address').show();
      }

      $('#loading-bar').show();
      // Render Yelp chart   
      var url = 'yelp/search?term=' + location_name + "&ll=" + ll;  
      $.getJSON(url).done(function(dataSearch) {
        try {
          var yelp = JSON.parse(dataSearch).businesses[0];
          // $('#yelpOverallRating').text(yelp.rating);
          if (yelp.is_closed) {
            // alert('yes!');
          }
          if (yelp.phone.slice(-4) == international_phone_number.slice(-4)) {
            url = 'yelp/business?url=' + yelp.url;  
            $.getJSON(url).done(function(lineYelp){
              title = 'Yelp - Recent Overall Rating: ' + getAvgRating(lineYelp) + '/5';
              plotGraph('chartYelp', lineYelp, title);
              $('#loading-bar').hide();
              $("#chartYelp").css({"position":"relative","top":"0px"});
              $("#googlemap").css({"position":"relative","top":"0px"});
              $('#address').show();
            })
          }
          else {
            $('#loading-bar').hide();
          }  
        }
        catch (ex) {
          $('#loading-bar').hide();
          if (!place.reviews) {
            $('#no-reviews').show(); 
          }
          // Show not found message
        }
      })   

      $('#name').text(location_name);
      $('#fulladdress').text(formatted_address);  
      if (formatted_phone_number) {
        $('#phone').text("Ph.: " + formatted_phone_number);   
      }
      
      // if (zipcode){
      //   document.getElementById("location_postcode").value = zipcode;
      // }
      // if (city) {
      //   document.getElementById("location_city").value = city;
      // }
      // if (country) {
      //   document.getElementById("location_country").value = country;
      // }
      // if (sublocality) {
      //   document.getElementById("location_district").value = sublocality;
      // }
      // if (streetname) {
      //   document.getElementById("location_address").value = streetname;
      // }
      // if (formatted_phone_number) {
      //   document.getElementById("location_phone_number").value = formatted_phone_number;
      // }
      // photos = place.photos;
      // $('#place_images').empty();
      // for (var i = 0; i < photos.length; i++) {
      //   var url = photos[i].getUrl({maxHeight: "1280", maxWidth: "1280"});
      //   $('#place_images').prepend('<img src="' + url + '"/>');
      // }

      // alert(js_obj.businesses[0].rating_img_url);
      // alert(js_obj.businesses[0].rating_img_url_small);
      // alert(js_obj.businesses[0].rating_img_url_large);
      // alert(js_obj.businesses[0].image_url);
    });
    
    // This is the function to animate the marker after dropping it.
    function toggleBounce() {
      if (marker.getAnimation() != null) {
        marker.setAnimation(null);
      } else {
        marker.setAnimation(google.maps.Animation.BOUNCE);
      }
    };

    function epoch_toYMD(utcSeconds) {
      var d = new Date(0); // The 0 there is the key, which sets the date to the epoch
      d.setUTCSeconds(utcSeconds);
      return d.toISOString().substring(0, 19).replace('T', ' ');
    }

    function getAvgRating(line) {
      var total = 0; 
      for(var i = 0, len = line.length; i < len; i++){
          total += line[i][1]; 
      }
      return Math.round( total/line.length * 10 ) / 10;      
    }

    function plotGraph(graph, line, title) {

      $.jqplot.config.enablePlugins = true;

      $.jqplot(graph, [line], {
        title: title,
        axes: {
          yaxis: {
            min: 0, 
            max: 6,
            tickInterval: 1
          },        
          xaxis: {
            renderer:$.jqplot.DateAxisRenderer,
            tickOptions:{formatString:'%Y, %b-%#d'}
          }
        },
        highlighter: {
          show: true,
          sizeAdjust: 7.5
        },
        series:[
          {
            lineWidth: 4, 
            markerOptions:
            {
                style:'filledCircle'
            }
          }        
        ],
        seriesDefaults: {
          rendererOptions: {
            smooth: true
          },
          trendline: {
            color: '#666666',   // CSS color spec for the trend line.
          }
        } 
      }).replot();
    }    

  //-->
  </script>

<% end %>